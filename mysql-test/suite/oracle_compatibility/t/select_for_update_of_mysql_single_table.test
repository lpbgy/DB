# parse_mode: the way DB parses queries
# value 1: mysql 2: oracle


let $initial_timeout=`select @@innodb_lock_wait_timeout`;
set global innodb_lock_wait_timeout=1;
let $initial_lock_wait_timeout=`select @@lock_wait_timeout`;
set global lock_wait_timeout=1;


connect (a,localhost,root,,);
connect (b,localhost,root,,);

connection a;
let $session_parse_mode_a=`select @@parse_mode`;
set parse_mode=1;
select @@innodb_lock_wait_timeout;

create table t(id1 int primary key, name1 char(20), age int);

insert into t values (1, 'tom', 20),(2, 'jack', 21),(3, 'allen', 19);


connection b;
let $session_parse_mode_b=`select @@parse_mode`;
set parse_mode=1;
let $connection_b_id=`SELECT CONNECTION_ID()`;

--echo ###################################################################
--echo # Test Case 1-1: parse field 
--echo ###################################################################
connection a;

--error ER_PARSE_ERROR
select t.* from t where id1 = 1 for update of *;

--error ER_PARSE_ERROR
select t.* from t where id1 = 1 for update of test.t.id;

--error ER_UNRESOLVED_TABLE_LOCK
select t.* from t where id1 = 1 for update of t.id2;

--error ER_UNRESOLVED_TABLE_LOCK
select t.* from t for update of age;

--error ER_UNRESOLVED_TABLE_LOCK
select t.* from t where id1 = 1 for update of t.id1;

--error ER_UNRESOLVED_TABLE_LOCK
select t.* from t where id1 = 1 for update of test.*;

--error ER_DUPLICATE_TABLE_LOCK
select id1 from (select id1 from t) tmp for update of tmp;


select t.* from t where id1 = 1 for update of t.*;
select t.* from t where id1 = 1 for update of t;
select t.* from t where id1 = 1 for update of test.t;
select t.* from t where id1 = 1 for update of test.t.*;
select id1 from (select id1 from t for update of t) tmp;

--echo ###################################################################
--echo # Test Case 1-2: parse field, alias 
--echo ###################################################################
create table t2(id int, name varchar(255));
insert into t2 values (1, 'aaa');
insert into t2 values (2, 'bbb');
insert into t2 values (3, 'ccc');
insert into t2 values (4, 'ddd');
insert into t2 values (5, 'eee');

select name as aname from t2 t for update of t;

--error ER_UNRESOLVED_TABLE_LOCK
select name as aname from t2 t for update of t2;

select name as aname from t2 t for update of test.t;

--error ER_UNRESOLVED_TABLE_LOCK
select name as aname from t2 t for update of test.t2;

select name as aname from t2 t for update of test.t.*;

--error ER_UNRESOLVED_TABLE_LOCK
select name as aname from t2 t for update of test.t2.*;

drop table t2;


--echo ###################################################################
--echo # Test Case 3: single table      without where clause     timeout
--echo ###################################################################
connection a;
begin;
select id1 from t for update of test.t;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
select id1 from t for update of t.*;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 4: single table        with where           success 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of t;

connection b;
select id1 from t where id1 = 2 for update of t;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 5: single table        with where           timeout 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of test.t;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
select id1 from t where id1 = 1 for update of t;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 6: single table        with where    delete   timeout 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of test.t.*;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
delete from t where id1 = 1;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 7: single table        with where    update   timeout 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of t;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
update t set age = 30 where id1 = 1;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 8: single table        drop              timeout 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of t.*;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
drop table t;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 9: single table        truncate              timeout 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of test.t;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
truncate table t;

connection a;
commit;


--echo ###################################################################
--echo # Test Case 10: single table        alter              timeout 
--echo ###################################################################
connection a;
begin;
select id1 from t where id1 = 1 for update of t;

connection b;
--error ER_LOCK_WAIT_TIMEOUT
alter table t add column sex int;

connection a;
commit;


--echo ###################################################################
--echo # end test case
--echo ###################################################################
connection a;
--replace_result $session_parse_mode_a <session_parse_mode_a>
eval set parse_mode=$session_parse_mode_a;

connection b;
--replace_result $session_parse_mode_b <session_parse_mode_b>
eval set parse_mode=$session_parse_mode_b;

connection default;
drop table t;

--replace_result $initial_timeout <initial_timeout>
eval set global innodb_lock_wait_timeout=$initial_timeout;

--replace_result $initial_lock_wait_timeout <initial_lock_wait_timeout>
eval set global lock_wait_timeout=$initial_lock_wait_timeout;
