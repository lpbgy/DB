set global innodb_lock_wait_timeout=1;
set global lock_wait_timeout=1;
set parse_mode=2;
select @@innodb_lock_wait_timeout;
@@innodb_lock_wait_timeout
1
create table t1(id1 int primary key, name1 char(20), age int);
create table t2(id2 int primary key, name2 char(20), age int);
insert into t1 values (1, 'tom', 20),(2, 'jack', 21),(3, 'allen', 19);
insert into t2 values (1, 'zhang', 23),(2, 'li', 24),(3, 'wang', 25);
set parse_mode=2;
set parse_mode=2;
###################################################################
# Test Case 1: parse field 
###################################################################
select t1.* from t1,t2 where id1 = 1 for update of *;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*' at line 1
select t1.* from t1,t2 where id1 = 1 for update of t1.*;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*' at line 1
select t1.* from t1,t2 where id1 = 1 for update of t1;
ERROR 42S22: Unknown column 't1' in 'of list'
select t1.* from t1,t2 where id1 = 1 for update of t1.id2;
ERROR 42S22: Unknown column 't1.id2' in 'of list'
select t1.* from t1,t2 where id1 = 1 for update of age;
ERROR 23000: Column 'age' in of list is ambiguous
select t1.* from t1,t2 where id1 = 1 for update of t1.id1;
id1	name1	age
1	tom	20
1	tom	20
1	tom	20
select t1.* from t1,t2 where id1 = id2 for update of id1;
id1	name1	age
1	tom	20
2	jack	21
3	allen	19
select t1.* from t1 left join t2 on id1 = id2 for update of id1, t2.id2;
id1	name1	age
1	tom	20
2	jack	21
3	allen	19
select t1.* from t1,t2 where id1 = 1 order by id1, id2 for update of id1, id2;
id1	name1	age
1	tom	20
1	tom	20
1	tom	20
select t1.* from t1 join t2 on id1 = id2 for update of id1, t1.age;
id1	name1	age
1	tom	20
2	jack	21
3	allen	19
select t1.* from t1 right join t2 on id1 = id2 where id1 = 1 for update of id1, t2.age;
id1	name1	age
1	tom	20
###################################################################
# Test Case 3: multi tables      without where clause     timeout
###################################################################
begin;
select id1 from t1, t2 for update of id1;
id1
3
2
1
3
2
1
3
2
1
select id1 from t1, t2 for update of name1;
select id1 from t1, t2 for update of t1.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
commit;
###################################################################
# Test Case 4: multi tables        with where           success 
###################################################################
begin;
select id1 from t1, t2 where t2.id2 = 1 for update of id2;
id1
1
2
3
select id1 from t1, t2 for update of name1;
select id1 from t1, t2 where id2 = 2 for update of t2.age;
id1
3
2
1
3
2
1
3
2
1
id1
1
2
3
commit;
###################################################################
# Test Case 6: multi tables        with where           timeout 
###################################################################
begin;
select id1 from t1, t2 where t2.id2 = 1 for update of t1.age, id2;
id1
1
2
3
select id1 from t1, t2 where id1 = 1 for update of name1;
select id1 from t1, t2 for update of t2.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
commit;
###################################################################
# Test Case 7: multi tables        update delete  timeout 
###################################################################
begin;
select id1 from t1, t2 where t2.id2 = 1 for update of t1.age, id2;
id1
1
2
3
update t1 set age = 30;
delete from t2 where id2 = 1;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
commit;
###################################################################
# Test Case 8: multi tables       drop truncate  timeout 
###################################################################
begin;
select id1 from t1, t2 where t2.id2 = 1 for update of t1.age, id2;
id1
1
2
3
drop table t1;
truncate table t2;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
commit;
###################################################################
# Test Case 9: multi tables        alter             timeout 
###################################################################
begin;
select id1 from t1, t2 where t2.id2 = 1 for update of t1.age, id2;
id1
1
2
3
alter table t1 add column sex int;
alter table t2 add column sex int;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
commit;
###################################################################
# Test Case 10: multi table        prepare             success 
###################################################################
begin;
prepare pron from 'select id1 from t1, t2 where t2.id2 = ? for update of t1.age, id2';
set @p = 1;
select id1 from t1 for update of t1.age;
select id2 from t2 for update of t2.age;
execute pron using @p;
id1
1
2
3
commit;
id1
1
2
3
id2
1
2
3
###################################################################
# Test Case 11: muti tables        prepare              timeout 
###################################################################
begin;
prepare pron from 'select id1 from t1, t2 where t2.id2 = ? for update of t1.age, id2';
set @p = 1;
execute pron using @p;
id1
1
2
3
select id1 from t1 for update of t1.age;
select id2 from t2 for update of t2.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
commit;
###################################################################
# Test Case 12: muti tables        lock tables read         timeout 
###################################################################
lock tables t1 read;
select id1 from t1 for update of t1.age;
ERROR HY000: Table 't1' was locked with a READ lock and can't be updated
select id1 from t1 for update of t1.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
unlock tables;
###################################################################
# Test Case 13: muti tables        lock tables write         timeout 
###################################################################
lock tables t2 write;
select id2 from t2 for update of t2.age;
id2
1
2
3
select id2 from t2 for update of t2.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
unlock tables;
###################################################################
# Test Case 14: muti tables        lock tables t1 write, t2 read
###################################################################
lock tables t1 write, t2 read;
select id1 from t1 for update of t1.age;
id1
1
2
3
select id2 from t2 for update of t2.age;
ERROR HY000: Table 't2' was locked with a READ lock and can't be updated
select id1 from t1 for update of t1.age;
select id2 from t2 for update of t2.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
unlock tables;
###################################################################
# Test Case 15: muti tables        flush tables with read lock
###################################################################
flush tables t1, t2 with read lock;
select id1 from t1 for update of t1.age;
ERROR HY000: Table 't1' was locked with a READ lock and can't be updated
select id2 from t2 for update of t2.age;
ERROR HY000: Table 't2' was locked with a READ lock and can't be updated
select id1 from t1 for update of t1.age;
select id2 from t2 for update of t2.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
unlock tables;
###################################################################
# Test Case 16: muti tables        flush tables for export 
###################################################################
flush tables t1, t2 for export;
select id1 from t1 for update of t1.age;
ERROR HY000: Table 't1' was locked with a READ lock and can't be updated
select id2 from t2 for update of t2.age;
ERROR HY000: Table 't2' was locked with a READ lock and can't be updated
select id1 from t1 for update of t1.age;
select id2 from t2 for update of t2.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
unlock tables;
###################################################################
# Test Case 17: multi tables      insert low_priority     timeout
###################################################################
begin;
insert low_priority into t1 values (100, 'sun', 23);
select id1 from t1, t2 for update of name1;
select id1 from t1, t2 for update of t1.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
###################################################################
# Test Case 18: multi tables      insert high_priority     timeout
###################################################################
begin;
insert high_priority into t1 values (101, 'li', 23);
select id1 from t1, t2 for update of name1;
select id1 from t1, t2 for update of t1.age;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
###################################################################
# Test Case 19: multi tables      deadlock
###################################################################
begin;
select id1 from t1 for update of t1.age;
id1
1
2
3
100
101
begin;
select id2 from t2 for update of t2.age;
id2
1
2
3
select id1 from t1 for update of t1.age;
select id2 from t2 for update of t2.age;
ERROR 40001: Deadlock found when trying to get lock; try restarting transaction
commit;
id1
1
2
3
100
101
###################################################################
# end test case
###################################################################
create table t(id1 int primary key, name1 char(20), age int);
insert into t values (1, 'tom', 20),(2, 'jack', 21),(3, 'allen', 19);
select * from t;
id1	name1	age
1	tom	20
2	jack	21
3	allen	19
update t set age = 30;
alter table t add column sex int;
select * from t;
id1	name1	age	sex
1	tom	30	NULL
2	jack	30	NULL
3	allen	30	NULL
set parse_mode=<session_parse_mode_a>;
insert into t values (4, 'lily', 18, 0);
select * from t;
id1	name1	age	sex
1	tom	30	NULL
2	jack	30	NULL
3	allen	30	NULL
4	lily	18	0
update t set age = 30;
alter table t add column addr char(100);
select * from t;
id1	name1	age	sex	addr
1	tom	30	NULL	NULL
2	jack	30	NULL	NULL
3	allen	30	NULL	NULL
4	lily	30	0	NULL
truncate table t1;
drop table t1;
set parse_mode=<session_parse_mode_b>;
insert into t values (5, 'hellen', 18, 0, 'london');
select * from t;
id1	name1	age	sex	addr
1	tom	30	NULL	NULL
2	jack	30	NULL	NULL
3	allen	30	NULL	NULL
4	lily	30	0	NULL
5	hellen	18	0	london
update t set age = 30;
alter table t add column school char(100);
select * from t;
id1	name1	age	sex	addr	school
1	tom	30	NULL	NULL	NULL
2	jack	30	NULL	NULL	NULL
3	allen	30	NULL	NULL	NULL
4	lily	30	0	NULL	NULL
5	hellen	30	0	london	NULL
truncate table t2;
drop table t2;
set parse_mode=<session_parse_mode_c>;
truncate table t;
drop table t;
set global innodb_lock_wait_timeout=<initial_timeout>;
set global lock_wait_timeout=<initial_lock_wait_timeout>;
