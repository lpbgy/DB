#
# Test FULL JOIN
#
# 创建测试数据库和测试表，并预制数据，为测试做准备
DROP DATABASE IF EXISTS test_db_full_join;
CREATE DATABASE test_db_full_join;
USE test_db_full_join;
create table t1 (a int,a1 int);
create table t2 (b int,a1 int);
create table t3 (c int,a1 int);
create table t4 (d int);
create table t5 (a int, b int);
create table t7 (d int, e varchar(20));
insert into t1 values(0,0),(1,1),(4,4),(5,5);
insert into t2 values(0,0),(2,2),(4,4),(6,6);
insert into t3 values(0,0),(3,3),(5,5),(6,6);
insert into t4 values(0),(1),(2),(3),(4),(5),(6),(NULL);
insert into t5 values(0,0),(4,4);
insert into t7 values(0,'a'),(1,'b'),(2,'c'),(3,'d'),(NULL,'e'),(4,NULL);

# 1. 简单的FULL JOIN查询
select * from t1 full join t2 on a=b order by a,b;
select * from t1 natural full join t2 order by a,b;
select * from t1 full join t2 using(a1) order by a,b;

# 2. FULL JOIN出现在派生表中
select * from (select * from t1 natural full join t2)dt order by a,b;
--error ER_DUP_FIELDNAME
select * from (select * from t1 full join t2 on a=b)dt;
select * from (select a,b from t1 full join t2 on a=b)dt order by a,b;
select * from (select * from t1 full join t2 using(a1))dt order by a,b;

# 3. 连续的FULL JOIN查询
select * from t1 full join t2 full join t3 on b=c on a=b order by a,b;
select * from t1 natural full join t2 natural full join t3 order by a,b,c;

# 4. FULL JOIN查询带where条件
select * from t1 full join t2 on a=b where t1.a1<5 order by a,b;
select * from t1 full join t2 using(a1) where a1<7 order by a,b;
--error ER_NATURAL_JOIN_COLUMN_QUALIFIED_REFERED
select * from t1 full join t2 using(a1) where t1.a1<7;

# 5. 多个FULL JOIN出现在同一个SELECT中
select * from t1 a full join t2 b on a=b, t1 c natural full join t2 d where a.a1=d.b order by a.a,b.b,c.a,d.b;

# 6. FULL_JOIN_ANTI hint
select /*+ FULL_JOIN_ANTI() */ * from t1 left join t2 on a=b order by a,b;
select /*+ FULL_JOIN_ANTI() */ * from t1 right join t2 on a=b order by a,b;
select /*+ FULL_JOIN_ANTI() */ * from t1 left join t2 on a=b,t4 order by a,b,d;
select /*+ FULL_JOIN_ANTI() */ * from (t1,t2,t4) order by a,b,d;
select /*+ FULL_JOIN_ANTI() */ * from t1 order by a;

# 7. VIEW定义中的FULL JOIN
drop view if exists v1;
create view v1 as select t1.a1,a,b from t1 full join t2 on a=b;
select * from v1 order by a,b;
select * from v1 a join v1 b on a.a1=b.a1 order by a.a,a.b,b.a,b.b;

# 8. FULL JOIN的表为派生表
select * from (select * from t1)dt1 full join (select * from t2)dt2 using(a1) order by a,b;
select * from (select * from t1)dt1 full join (select * from t2)dt2 on a=b order by a,b;
select * from (select * from t1)dt1 full join (select * from t2)dt2 on dt1.a=b order by a,b;
select * from (select * from t1)dt1 full join (select * from t2)dt2 on test.dt1.a=b order by a,b;
--error ER_BAD_FIELD_ERROR
select * from (select * from t1)dt1 full join (select * from t2)dt2 on t1.a=b;

# 9. FULL JOIN的表为多表联结
select * from (t1 join t2 on a=b) full join (t3 join t4 on c=d) on t1.a1 = t3.a1 order by a,b,c,d;

# 10. NATURAL FULL JOIN多层嵌套后的外层条件解析
select * from t1 natural full join t2 natural full join t3 where t1.a>0 or t2.b>0 or c>0 order by a,b,c;

# 11. FULL JOIN多层嵌套后的外层条件解析
select * from t1 full join t2 on a=b full join t3 on b=c join t4 on t1.a1=d or t1.a1 is null order by a,b,c,d;

# 12. FULL JOIN经NATURAL JOIN后再进行FULL JOIN时的外层条件解析
select * from ((t1 full join t2 on a=b) natural left join t5) full join t3 on a=c order by a,b,c;
select * from ((t1 full join t2 on a=b) natural left join t5) full join t3 on t1.a=c order by a,b,c;
--error ER_NATURAL_JOIN_COLUMN_QUALIFIED_REFERED
select * from ((t1 full join t2 on a=b) natural full join t5) full join t3 on t1.a=c;

# 13. stored procedure
--delimiter //
create procedure full_join_test (IN min int, IN max int)
begin
  select * from t1 full join t2 on a=b where min <= a and max >= a order by a,b;
  select * from t1 natural full join t2 where min <= a1 and max >= a1 order by a,b;
  select * from t1 full join t2 using(a1) where min <=a1 and max >=a1 order by a,b;
end//
--delimiter ;
call full_join_test(1,5);

# 14. create table as
drop table if exists t6;
create table t6 as select a, t1.a1 as d, b, t2.a1 as e, c, t3.a1 as f from t1 full join t2 full join t3 on b=c on a=c;
select * from t6 order by a,b,c;

# 15. rownum with full join
select * from t1 full join (select rownum r,a,b from t5)dt5 on dt5.r=a1 order by t1.a;

# 16. 联结数据包含NULL值
select * from t4 full join t7 on t4.d=t7.d order by t4.d,t7.d;

# 17. 联结数据包含NULL值，使用<=>
select * from t4 full join t7 on t4.d<=>t7.d order by t4.d,t7.d;

# 18. 字符串联结条件
select * from (select * from t7 where d>=2 or d is null) x
              full join
              (select * from t7 where d<=4 or d is null) y
              on (x.e like '%a' or y.e like '%b') and x.e = y.e
order by x.d,y.d;

# 19. full join在on条件中
select * from t1 full join t2 on a in (select t2.a1 from t2 full join t3 on b<=c) order by a,b;
select * from t1 full join t2 on a in (select t2.a1 from t2 full join t3 on b<=c) and a=b order by a,b;

# 20. full join在where条件中
select * from t1 where exists (select * from t3 natural full join t2 where a1=t1.a1) order by a;
select * from t1 where a1 not in (select c from t3 full join t2 on t2.a1=t3.a1) order by a;

# 21. full join在having条件中
select a1 from t1 group by a1 having not exists (select * from t3 full join t2 on t2.a1=t3.a1 where t1.a1=t2.a1 or t1.a1=t3.a1);
select a1 from t1 group by a1 having a1 not in (select c from t3 full join t2 on t2.a1=t3.a1);

# 22. prepared statement
prepare stmt from 'select * from t1 full join t2 on a=b where t1.a1<=? or t1.a1 is null order by a,b';
set @var1 = 2;
execute stmt using @var1;

# 23. prepared statement ?出现在需要复制的部分
prepare stmt1 from 'select * from t1 full join t2 on a=b and t1.a1<=? order by a,b';
set @var1 = 7;
execute stmt1 using @var1;

# 24. lateral
--error ER_BAD_FIELD_ERROR
select * from t1 a, t1 b full join lateral(select * from t1 where a=a.a)dt1 on b.a=dt1.a;
--error ER_TF_FORBIDDEN_JOIN_TYPE
select * from t1 a, t1 b full join lateral(select * from t1 where a=b.a)dt1 on b.a=dt1.a;
select * from t2 b full join (t1 a ,lateral(select * from t1 where a=a.a)dt1) on b.b=dt1.a order by b,dt1.a;

# 25. procedure中的迭代
--delimiter //
create or replace procedure full_join_test(x int)
begin
  declare t int default 1;
  while t<5
  do
	select *
	from t1 full join t2 on a<b+1 and x+t>t1.a1
	where a < t+2
  order by a,b;
	set t=t+1;
  end while;
end;//
--delimiter ;
call full_join_test(2);

# 26. FULL 关键字 schema,table
create schema FULL;
use FULL;
create table FULL(FULL int);
drop schema FULL;

create schema FulL;
use FulL;
create table fULl(FULL int);
drop schema FulL;

USE test_db_full_join;

# 27. FULL 关键字 procedure,procedure中的变量
--delimiter //
create or replace procedure full()
begin
  declare full int default 1;
  while full < 5
  do
    select * from t1 full join t2 on a=b and a>=2*full-2 order by a,b;
    set full = full + 1;
  end while;
end;//
--delimiter ;
call full();
drop procedure full;

# 28. FULL 关键字 role,user,local变量
create role full;
drop role full;

create user full;
drop user full;

set @full = 1;

# 29. FULL 关键字 VIEW
drop view if exists full;
create view full as select * from t1 natural full join t2;
select * from full join t2 on full.a1=t2.b order by full.a1,t2.b;
select * from full full join t2 on full.a1=t2.b order by full.a1,t2.b;
drop view full;

# 30. FULL关键字 function
--delimiter //
create function full(x int)
returns int reads sql data
begin
  declare ret int;
  select count(*)
  into ret
  from t1 full join t2 on a=b
  where a<=x;
  return ret;
end//
--delimiter ;
select test_db_full_join.full(8);
drop function if exists full;

# 31. FULL关键字 trigger, FULL JOIN in trigger
create table tt as select * from t1 natural full join t2;
create table tt1 like tt;
--delimiter //
create trigger full before insert on tt
for each row
begin
  insert into tt1
  select * from t1 natural full join t2
  where a1<NEW.a1;
end;//
--delimiter ;
insert into tt values(3,3,3);
select * from tt order by a1,a,b;
select * from tt1 order by a1,a,b;
drop trigger full;
drop table tt1;
drop table tt;

# 32. FULL关键字 event, FULL JOIN in event
drop table if exists tt;
drop event if exists full;
create event full
on schedule at current_timestamp+interval 3 second
do
  create table tt as
  select *
  from t1 natural full join t2;
show tables like 'tt';
--sleep 5
show tables like 'tt';

# 33. create as select, insert into, update
drop table if exists tt;
create table tt as select * from t1 natural full join t2;
insert into tt select t1.a1,a,c from t1 full join t3 on a=c;
select * from tt order by a,b;
update tt set (a1,a,b) = (select * from t2 natural full join t3  where a=c limit 1) where tt.a in (select c from t3);
select * from tt order by a,b;
delete from tt where a1 in (select a1 from t3 full join t2 using(a1));
select * from tt order by a,b;
drop table tt;

# 34. hints混用
drop view if exists v1;
create view v1 as select /*+ SEMIJOIN() */ * from t1 natural full join t2;
--replace_regex /#fj0_[0-9a-f]*/#fj0_xxxxxx/
show create view v1;
drop view v1;

drop view if exists v1;
create view v1 as select /*+ SEMIJOIN() FULL_JOIN_ANTI() */ * from t1 natural left join t2;
show create view v1;
drop view v1;

# 35. FULL关键字表别名,full join in cte
--error ER_DERIVED_MUST_HAVE_ALIAS
select * from (select * from t1)full full join t2 on a=b;
--error ER_PARSE_ERROR
select * from t1 full full join t2 on a=b;
with full as
(select *
 from t1 natural full join t2
 where a1 in (select a1 from t1 natural full join t3))
select * from full order by a,b;
--error ER_CTE_RECURSIVE_REQUIRES_SINGLE_REFERENCE
with recursive full as
(select * from t1 where a1 = 0
 union all
 select t2.* from full full join t2 on a<b)
select * from full;
with recursive full as
(select * from t1 where a1 = 0
 union all
 select t2.* from full join t2 on a<b)
select * from full order by a;

# 36. HAVING条件解析
select * from t1 full join t2 on a=b having a>2 order by a,b;
select * from t1 full join t2 on a=b having t1.a>2 order by a,b;
select t1.a b,t1.a1,t2.b a,t2.a1 from t1 full join t2 on a=b having b>2 order by b,a;
select t1.a b,t1.a1,t2.b a,t2.a1 from t1 full join t2 on a=b having t1.a>2 order by t1.a,a;
select t1.a b,t1.a1,t2.b a,t2.a1 from t1 full join t2 on a=b having t2.b>2 order by t2.b,b;
--error ER_BAD_FIELD_ERROR
select t1.a b,t1.a1,t2.b a,t2.a1 from t1 full join t2 on a=b having t2.a>2;
select * from t1 full join t2 full join t3 on b=c on a=c having t1.a>2 order by a,b,c;
select t1.a b,t2.b c,t3.c a from t1 full join t2 full join t3 on b=c on a=c having a>2 order by a,b,c;
select sum(b) from t1 full join t2 on a=b group by t1.a1 having a1>0 order by t1.a1;
select sum(b) from t1 full join t2 on a=b group by t1.a1 having t1.a1>0 order by t1.a1;
--error ER_NON_UNIQ_ERROR
select sum(b) from t1 full join t2 on a=b group by t1.a1 having t1.a1>0 order by a1;
--error ER_NON_UNIQ_ERROR
select t1.a1 aa,sum(b) from t1 full join t2 on a=b group by a1 having sum(t2.a1)>0;
select t1.a1,sum(b) from t1 full join t2 on a=b group by a1 having a1>0 order by a1;
--error ER_NON_UNIQ_ERROR
select t1.a1,t2.a1,sum(b) from t1 full join t2 on a=b group by a1 having a1>0;
--error ER_NON_UNIQ_ERROR
select t1.a1,t2.a1,sum(b) from t1 full join t2 on a=b group by t1.a1 having a1>0;
select t1.a1,t2.a1,sum(b) from t1 full join t2 on a=b group by t1.a1,t2.a1 having t2.a1>0 order by sum(b);
select t1.a1,b from t1 full join t2 on a=b group by a1,b having a1>0 order by a1;

# 37. two schema test cases
drop database if exists test2;
create database test2;
create table test2.t1 (a int, a1 int);
insert into test2.t1 values(1,1);

--error ER_NON_UNIQ_ERROR
select * from t1 full join test2.t1 on t1.a=test2.t1.a;
select * from t1 full join test2.t1 on test_db_full_join.t1.a=test2.t1.a order by test_db_full_join.t1.a;
# the following test result is not quite correct, wait for the fix from mysql
--error ER_NON_UNIQ_ERROR
select test_db_full_join.t1.a1 from t1 full join test2.t1 using(a) join t5 using(a) group by t1.a1 order by t1.a1;
drop database test2;

# 38. non unique table alias
--error ER_NONUNIQ_TABLE
select * from t1 full join t2 on a=b, t1;
--error ER_NONUNIQ_TABLE
select * from t1 , t2 full join (t1 full join t3 on a=c) on b=c;
select * from t1 full join t2 on a=b, t1 a order by t1.a,a.a;
--error ER_NONUNIQ_TABLE
select * from t1 full join t2 b on a=b, t1 a, t1 full join t3 on a=c;
--error ER_NONUNIQ_TABLE
select * from t1 full join t2 on a=b, t1 a, t1 t2;

# 39. additional test cases
select * from t1 full join t2 full join t3 using (a1) on a=b order by a,b,c;
select t1.* from t1 full join t2 on a=b order by a;
set @save_sql_mode = @@sql_mode;
set @@sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
select count(*),t1.* from t3 left join t1 full join t2 on a=b on c=b where a>100;
set sql_mode = @save_sql_mode;

# 清理测试数据
DROP DATABASE IF EXISTS test_db_full_join;
# End of ZSQL的'FULL JOIN'语法 tests
