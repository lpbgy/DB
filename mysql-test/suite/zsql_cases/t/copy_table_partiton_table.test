##########################################################
# this is the test for funtion copy table from A to B
# in case of partition table 
# we test the function in master as well as  the success or failure in slave in quick sync replication situation
##########################################################

--source include/have_log_bin.inc
--source include/not_group_replication_plugin.inc
--source include/master-slave.inc
#semisync plugine has built in ,we do not need to install it

--source include/rpl_connection_slave.inc
--source include/stop_slave.inc
--source include/start_slave.inc

--source include/rpl_connection_master.inc
#set global rpl_semi_sync_master_enabled = OFF; 
#set global rpl_semi_sync_master_wait_cond_hwm = '1:0';
#set global rpl_semi_sync_master_wait_cond_lwm = '1:0';
#set global rpl_semi_sync_master_group1 = '1,2:1';
#set global rpl_semi_sync_master_quick_sync_enabled=ON;
#set global rpl_semi_sync_master_enabled = ON; 
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--echo #########################################################
--echo #CASE 1:normal test - range partition 
--echo #########################################################

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
partition p0 VALUES LESS THAN (10),
partition p1 VALUES LESS THAN (20),
partition p2 VALUES LESS THAN (30),
partition p3 VALUES LESS THAN MAXVALUE
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
partition p0 VALUES LESS THAN (10),
partition p1 VALUES LESS THAN (20),
partition p2 VALUES LESS THAN (30),
partition p3 VALUES LESS THAN MAXVALUE
);

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(11,11);
insert into tb1 values(21,21);
insert into tb1 values(31,31);

copy table from tb1 to tb2;

select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--echo #########################################################
--echo #CASE 2:normal test - hash partition 
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY HASH (store_id)
partitions 4;

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY HASH (store_id)
partitions 4;

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(11,11);
insert into tb1 values(21,21);
insert into tb1 values(31,31);
copy table from tb1 to tb2;

select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--echo #########################################################
--echo #CASE 3:normal test - key partition 
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL PRIMARY KEY,
    store_id INT NOT NULL
)
partition by key (id)
partitions 4;

CREATE TABLE tb2 (
    id INT NOT NULL PRIMARY KEY,
    store_id INT NOT NULL
)
partition by key (id)
partitions 4;

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(11,11);
insert into tb1 values(21,21);
insert into tb1 values(31,31);
copy table from tb1 to tb2;

select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--echo #########################################################
--echo #CASE 4:normal test - list partition 
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
PARTITION BY LIST(store_id) (
    PARTITION p0 VALUES IN (1,5,6),
    PARTITION p1 VALUES IN (2,7,8),
    PARTITION p2 VALUES IN (3,9,10),
    PARTITION p3 VALUES IN (4,11,12)
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
PARTITION BY LIST(store_id) (
    PARTITION p0 VALUES IN (1,5,6),
    PARTITION p1 VALUES IN (2,7,8),
    PARTITION p2 VALUES IN (3,9,10),
    PARTITION p3 VALUES IN (4,11,12)
);

insert into tb1 values(1,1),(2,2),(3,3),(4,4);
insert into tb1 values(5,5),(6,6),(7,7),(8,8);
insert into tb1 values(9,9);
copy table from tb1 to tb2;

select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--echo #########################################################
--echo #CASE 5: abnormal test - one of the table has partition while another has not
--echo #########################################################

--echo #########################################################
--echo #CASE 5.1 : A has partition while B  has not
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by key (id)
partitions 2;

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
);
 
insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);

--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;

--echo #########################################################
--echo #CASE 5.2 : B has partition while A  has not
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by key (id)
partitions 2;
 
insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 6: abnormal test - A and B have diff partition table number
--echo #########################################################

--echo #########################################################
--echo #CASE 6.1: abnormal test - (range patition)A and B have diff partition table number
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings

use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
    partition p0 VALUES LESS THAN (6),
    partition p1 VALUES LESS THAN (12),
    partition p2 VALUES LESS THAN MAXVALUE
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
    partition p0 VALUES LESS THAN (6),
    partition p1 VALUES LESS THAN MAXVALUE
);

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);
insert into tb1 values(13,13);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 6.2: abnormal test - (key patition)A and B have diff partition table number
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings

use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by key (id)
partitions 2;

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by key (id)
partitions 3;

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;


--echo #########################################################
--echo #CASE 6.3: abnormal test - (hash patition)A and B have diff partition table number
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings

use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by hash (id)
partitions 2;

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by hash (id)
partitions 3;

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;

--echo #########################################################
--echo #CASE 6.4: abnormal test - (list patition)A and B have diff partition table number
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
PARTITION BY LIST(store_id) (
    PARTITION p0 VALUES IN (1,5,6),
    PARTITION p1 VALUES IN (2,7,8),
    PARTITION p2 VALUES IN (3,9,10),
    PARTITION p3 VALUES IN (4,11,12)
);
 
CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
PARTITION BY LIST(store_id) (
    PARTITION p0 VALUES IN (1,5,6),
    PARTITION p1 VALUES IN (2,7,8),
    PARTITION p2 VALUES IN (3,9,10)
);

insert into tb1 values(1,1),(2,2),(3,3),(4,4);
insert into tb1 values(5,5),(6,6),(7,7),(8,8);
insert into tb1 values(9,9);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error

select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;

--echo #########################################################
--echo #CASE 7: abnormal test - A and B have same partition table number but diff partition algorithm
--echo #########################################################

--echo #########################################################
--echo #CASE 7.1 : abnormal test - (range partition)A and B have same partition table number but diff partition algorithm
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
    partition p0 VALUES LESS THAN (8),
    partition p1 VALUES LESS THAN MAXVALUE
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
    partition p0 VALUES LESS THAN (6),
    partition p1 VALUES LESS THAN MAXVALUE
);

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);
insert into tb1 values(13,13);

--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 7.2 : abnormal test - (key partition)A and B have same partition table number but diff partition algorithm
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings

use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by key (id)
partitions 2;


CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by key (store_id)
partitions 2;

insert into tb1 values(1,0);
insert into tb1 values(2,1);
insert into tb1 values(7,2);

--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 7.3 : abnormal test - (hash partition)A and B have same partition table number but diff partition algorithm
--echo #nowdays we support this situation !!  
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings

use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by hash (id)
partitions 2;

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition by hash (store_id)
partitions 2;

insert into tb1 values(1,0);
insert into tb1 values(2,1);
insert into tb1 values(7,2);

copy table from tb1 to tb2;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 7.4:normal test - (list partition)A and B have same partition table number but diff partition algorithm 
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
PARTITION BY LIST(store_id) (
    PARTITION p0 VALUES IN (1,5,6,30),
    PARTITION p1 VALUES IN (2,7,8),
    PARTITION p2 VALUES IN (3,9,10),
    PARTITION p3 VALUES IN (4,11,12)
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
PARTITION BY LIST(store_id) (
    PARTITION p0 VALUES IN (1,5,6),
    PARTITION p1 VALUES IN (2,7,8),
    PARTITION p2 VALUES IN (3,9,10),
    PARTITION p3 VALUES IN (4,11,12)
);

insert into tb1 values(1,1),(2,2),(3,3),(4,4);
insert into tb1 values(5,5),(6,6),(7,7),(8,8);
insert into tb1 values(9,9);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error

select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb1 partition (p2) for update ;
select * from tb1 partition (p3) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;
select * from tb2 partition (p2) for update ;
select * from tb2 partition (p3) for update ;

--echo #########################################################
--echo #CASE 8: abnormal test - A and B have diff partition type
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY key (store_id)
partitions 2;

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY HASH (store_id)
partitions 2;

insert into tb1 values(1,1);
insert into tb1 values(2,2);
insert into tb1 values(7,7);
insert into tb1 values(13,13);

--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 9: abnormal test - A and B have subpartition tables
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;

CREATE TABLE tb1 (
    id INT NOT NULL PRIMARY KEY,
    store_id INT NOT NULL
)
partition BY RANGE (id) subpartition by hash(id %4) subpartitions 2(
    partition p0 VALUES LESS THAN (10),
    partition p1 VALUES LESS THAN MAXVALUE
);
 
CREATE TABLE tb2 (
    id INT NOT NULL PRIMARY KEY,
    store_id INT NOT NULL
)
partition BY RANGE (id) subpartition by hash(id %4) subpartitions 2(
    partition p0 VALUES LESS THAN (10),
    partition p1 VALUES LESS THAN MAXVALUE
);

insert into tb1 values(1,1);
insert into tb1 values(4,4);
insert into tb1 values(8,8);
insert into tb1 values(13,13);
--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (p0) for update ;
select * from tb2 partition (p1) for update ;

--echo #########################################################
--echo #CASE 10: abnormal test - A and B has diff patition name
--echo #########################################################

#--source include/rpl_connection_master.inc
#--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
#--let $assert_status_value= 1
#--source include/assert_status.inc

--disable_warnings
drop database if exists test_db;
create database if not exists test_db;
--enable_warnings
use test_db;
CREATE TABLE tb1 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
partition p0 VALUES LESS THAN (10),
partition p1 VALUES LESS THAN MAXVALUE
);

CREATE TABLE tb2 (
    id INT NOT NULL,
    store_id INT NOT NULL
)
partition BY RANGE (store_id) (
partition a VALUES LESS THAN (10),
partition b VALUES LESS THAN MAXVALUE
);

insert into tb1 values(1,1);
insert into tb1 values(11,11);

--disable_abort_on_error
copy table from tb1 to tb2;
--enable_abort_on_error
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (a) for update ;
select * from tb2 partition (b) for update ;

sleep 0.1;
--source include/rpl_connection_slave.inc
--disable_warnings
sleep 1;
--enable_warnings
use test_db;
select * from tb1 for update;
select * from tb2 for update;
select * from tb1 partition (p0) for update ;
select * from tb1 partition (p1) for update ;
select * from tb2 partition (a) for update ;
select * from tb2 partition (b) for update ;

--source include/rpl_connection_master.inc
--disable_warnings
drop database if exists test_db;
--enable_warnings

#--source include/uninstall_semisync_master.inc
#CALL mtr.add_suppression(".* Timeout waiting for reply of binlog .*");

--source include/rpl_end.inc







