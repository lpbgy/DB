create database merge_db;
use merge_db;
create table tm1 (a int, b int);
create table tm2 (a int, b int);
create table tk1 (a int primary key, b int);
insert into tm1 values (1,1),(2,2);
insert into tm2 values (1,2),(2,1),(3,3),(4,4);
insert into tk1 values (1,1),(2,2);
SET @old_lock_wait_timeout=@@global.lock_wait_timeout;
SET @old_innodb_lock_wait_timeout=@@global.innodb_lock_wait_timeout;
SET @@global.lock_wait_timeout=1;
SET @@global.innodb_lock_wait_timeout=1;
set @old_transaction_isolation=@@global.transaction_isolation;
set @@global.transaction_isolation = "READ-COMMITTED";
---------------------------------------------------------------
## Test_33: Test record lock
---------------------------------------------------------------
START TRANSACTION;
merge into merge_db.tm1 using merge_db.tm2 on(merge_db.tm1.a = merge_db.tm2.a) when matched then update set merge_db.tm1.b=merge_db.tm2.b when not matched then insert values (merge_db.tm2.a+1,merge_db.tm2.b+1);
SELECT * FROM merge_db.tm1 lock in share mode;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
SELECT * FROM merge_db.tm1 where b=100 lock in share mode;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
update merge_db.tm1 set b=100 where a=1;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
SELECT * FROM merge_db.tm2 lock in share mode;
a	b
1	2
2	1
3	3
4	4
SELECT * FROM merge_db.tm2 where a=1 lock in share mode;
a	b
1	2
SELECT * FROM merge_db.tm2 where a=1 FOR UPDATE;
a	b
1	2
insert into merge_db.tm1 values (3,3);
insert into merge_db.tm2 values (5,5);
ROLLBACK;
delete from merge_db.tm1 where a=3;
delete from merge_db.tm2 where a=5;
select * from merge_db.tm1;
a	b
1	1
2	2
START TRANSACTION;
merge into merge_db.tm1 using merge_db.tm2 on(merge_db.tm1.a = merge_db.tm2.a) when not matched then insert values (merge_db.tm2.a+1,merge_db.tm2.b+1);
select * from merge_db.tm1;
a	b
1	1
2	2
4	4
update merge_db.tm1 set b=200 where a=1;
ROLLBACK;
START TRANSACTION;
merge into merge_db.tk1 using merge_db.tm2 on (tk1.a = tm2.a) when not matched then insert values (tm2.a+2, tm2.b+2) when matched then update set tk1.b = tm2.b where tk1.a=1;
SELECT * FROM merge_db.tk1 where a=1 lock in share mode;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
SELECT * FROM merge_db.tk1 where a=2 lock in share mode;
a	b
2	2
SELECT * FROM merge_db.tk1 where a=2 for update;
a	b
2	2
update merge_db.tk1 set b=10 where a=2;
insert into merge_db.tk1 values (3,3),(4,4);
select * from merge_db.tk1;
a	b
1	1
2	10
3	3
4	4
insert into merge_db.tk1 values (5,5);
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ROLLBACK;
insert into merge_db.tm2 values (10,10),(11,11),(12,12),(13,13),(14,14);
START TRANSACTION;
merge into merge_db.tm1 using merge_db.tm2 on(merge_db.tm1.a = merge_db.tm2.a and tm2.a<10) when matched then update set merge_db.tm1.b=merge_db.tm2.b when not matched then insert values (merge_db.tm2.a,merge_db.tm2.b);
SELECT * FROM merge_db.tm2 lock in share mode;
a	b
1	2
2	1
3	3
4	4
10	10
11	11
12	12
13	13
14	14
SELECT * FROM merge_db.tm2 FOR UPDATE;
a	b
1	2
2	1
3	3
4	4
10	10
11	11
12	12
13	13
14	14
---------------------------------------------------------------
## Test_34: Test metadata lock
---------------------------------------------------------------
delete from merge_db.tm1;
insert into merge_db.tm1 values (1,1),(2,2);
START TRANSACTION;
merge into merge_db.tm1 using merge_db.tm2 on(merge_db.tm1.a = merge_db.tm2.a) when matched then update set merge_db.tm1.b=merge_db.tm2.b when not matched then insert values (merge_db.tm2.a,merge_db.tm2.b);
ALTER TABLE merge_db.tm1 ADD c int;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
ALTER TABLE merge_db.tm2 ADD c int;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
select LOCK_TYPE, LOCK_DURATION, LOCK_STATUS from performance_schema.metadata_locks where OBJECT_TYPE = 'table' and OBJECT_SCHEMA = 'merge_db' and OBJECT_NAME = 'tm1';
LOCK_TYPE	LOCK_DURATION	LOCK_STATUS
SHARED_WRITE	TRANSACTION	GRANTED
select LOCK_TYPE, LOCK_DURATION, LOCK_STATUS from performance_schema.metadata_locks where OBJECT_TYPE = 'table' and OBJECT_SCHEMA = 'merge_db' and OBJECT_NAME = 'tm2';
LOCK_TYPE	LOCK_DURATION	LOCK_STATUS
SHARED_READ	TRANSACTION	GRANTED
ROLLBACK;
---------------------------------------------------------------
## End test merge into
---------------------------------------------------------------
drop database if exists merge_db;
SET @@global.lock_wait_timeout=@old_lock_wait_timeout;
SET @@global.innodb_lock_wait_timeout=@old_innodb_lock_wait_timeout;
SET @@global.transaction_isolation=@old_transaction_isolation;
