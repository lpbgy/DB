include/rpl_init.inc [topology=1->2, 1->3, 1->4, 1->5]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
CREATE TABLE t1(c1 INT);
include/rpl_sync.inc
[connection server_1]
include/install_semisync_master.inc
####################################################################
# Test Case: check the thread_pool_size of threadpool mode
####################################################################
include/assert.inc [ should be 24]
SET GLOBAL rpl_semi_sync_master_trace_level= 255;
set global rpl_semi_sync_master_wait_no_slave = 0;
set global rpl_semi_sync_master_wait_cond_hwm = '2:0';
set global rpl_semi_sync_master_wait_cond_lwm = '1:0';
set global rpl_semi_sync_master_group1 = '1,2,3:1';
set global rpl_semi_sync_master_group2 = '4,5:2';
###################################################################
# Test Case: add slave 2 3 4 5
###################################################################
[connection server_2]
include/install_semisync_slave.inc
[connection server_3]
include/install_semisync_slave.inc
[connection server_4]
include/install_semisync_slave.inc
[connection server_5]
include/install_semisync_slave.inc
[connection server_1]
include/assert.inc [Rpl_semi_sync_master_current_wait_groups should be 2]
include/assert.inc [Rpl_semi_sync_master_err_flag should be 0]
###################################################################
# Test Case: sync_binlog=0, will call quick_sync_commitTrx func
###################################################################
set global sync_binlog = 0;
create database abczyy;
create table abczyy.tb1(a int key, b int);
insert into abczyy.tb1(a,b) values(1,1),(2,2),(3,3);
insert into abczyy.tb1(a,b) values(4,4);
drop database abczyy;
include/assert.inc [rpl_semi_sync_master_yes_tx should be 0 + 5]
include/assert.inc [rpl_semi_sync_master_no_tx should be 0 + 0]
set global sync_binlog = 1;
###################################################################
# Test Case: wait_point=AFTER_COMMIT, will call commitTrx func
###################################################################
set global rpl_semi_sync_master_wait_point = AFTER_COMMIT;
create database abczyy;
create table abczyy.tb1(a int key, b int);
insert into abczyy.tb1(a,b) values(1,1),(2,2),(3,3);
insert into abczyy.tb1(a,b) values(4,4);
drop database abczyy;
include/assert.inc [rpl_semi_sync_master_yes_tx should be 5 + 5]
include/assert.inc [rpl_semi_sync_master_no_tx should be 0 + 0]
set global rpl_semi_sync_master_wait_point = AFTER_SYNC;
###################################################################
# Test Case: binlog_order_commits=0, will call commitTrx func
###################################################################
set global binlog_order_commits = 0;
create database abczyy;
create table abczyy.tb1(a int key, b int);
insert into abczyy.tb1(a,b) values(1,1),(2,2),(3,3);
insert into abczyy.tb1(a,b) values(4,4);
drop database abczyy;
include/assert.inc [rpl_semi_sync_master_yes_tx should be 10 + 5]
include/assert.inc [rpl_semi_sync_master_no_tx should be 0 + 0]
set global binlog_order_commits = 1;
########################################################################
# Coverage Test
########################################################################
SET GLOBAL rpl_semi_sync_master_wait_for_slave_count = 4;
SET GLOBAL rpl_semi_sync_master_wait_for_slave_count = 4;
SET GLOBAL rpl_semi_sync_master_enabled= OFF;
SET GLOBAL rpl_semi_sync_master_enabled= OFF;
SET GLOBAL rpl_semi_sync_master_enabled= ON;
set global rpl_semi_sync_master_wait_no_slave= 1;
[connection server_2]
include/uninstall_semisync_slave.inc
[connection server_3]
include/uninstall_semisync_slave.inc
[connection server_4]
include/uninstall_semisync_slave.inc
[connection server_5]
include/uninstall_semisync_slave.inc
[connection server_1]
include/assert.inc [Rpl_semi_sync_master_current_wait_groups should be 2]
include/assert.inc [Rpl_semi_sync_master_err_flag should be 0]
include/assert.inc [Rpl_semi_sync_master_active_groups should be 0]
include/uninstall_semisync_master.inc
[connection server_1]
DROP TABLE t1;
CALL mtr.add_suppression(".* Timeout waiting for reply of binlog .*");
CALL mtr.add_suppression(".* Failed to allocate memory for ack_array .*");
include/rpl_end.inc
