################################################################################
# WL#7169 Semisync: make master wait for more than one slave to ack back
#
# The worklog added semisync master variable
# rpl_semi_sync_master_wait_for_slave_count. The variable controls how many acks
# from different slaves the transaction should wait for.
#
# The test verifies rpl_semi_sync_master_wait_for_slave_count works well.
################################################################################
--source include/not_group_replication_plugin.inc
--source include/have_binlog_format_row.inc

--let rpl_topology=1->2
--source include/rpl_init.inc
--source include/rpl_sync.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/install_semisync_master.inc

--echo ####################################################################
--echo # Test Case: check the thread_pool_size of threadpool mode
--echo ####################################################################
--let $assert_variable_name= thread_pool_size
--let $assert_variable_value= 4
--source include/assert_variable.inc

# It is for coverage test to cover the debug code.
SET GLOBAL rpl_semi_sync_master_enabled = 0;
set global rpl_semi_sync_master_timeout = 1000;

--echo ###################################################################
--echo # Test Case: add slave 2
--echo ###################################################################
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/install_semisync_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
while($clients != 1)
{
  sleep 10;
  --let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
}

--echo ###################################################################
--echo # the base config and status for quick sync
--echo ###################################################################
set global rpl_semi_sync_master_wait_cond_hwm = '2:1';
set global rpl_semi_sync_master_wait_cond_lwm = '1:0';
set global rpl_semi_sync_master_group1 = '2,3:1';
set global rpl_semi_sync_master_group2 = '1,4:1';
set global rpl_semi_sync_master_enabled = ON;

--let $assert_status_name= Rpl_semi_sync_master_active_groups
--let $assert_status_value= 2
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_stat_master_flag
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_err_flag
--let $assert_status_value= 0
--source include/assert_status.inc
--let $group1_status_expect= 1:GROUP_ACTIVE
--let $group1_status= [show status like "Rpl_semi_sync_master_group1_status", Value, 1]
--let assert_cond= "$group1_status" like "$group1_status_expect"
--let assert_text= Rpl_semi_sync_master_group1_status should be 1:GROUP_ACTIVE
--source include/assert.inc
--let $group2_status_expect= 0:GROUP_ACTIVE
--let $group2_status= [show status like "Rpl_semi_sync_master_group2_status", Value, 1]
--let assert_cond= "$group2_status" like "$group2_status_expect"
--let assert_text= Rpl_semi_sync_master_group2_status should be 0:GROUP_ACTIVE
--source include/assert.inc


--echo ###################################################################
--echo # the base config and status for slave
--echo ###################################################################
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

set global rpl_semi_sync_master_wait_cond_hwm = '2:1';
set global rpl_semi_sync_master_wait_cond_lwm = '1:0';
set global rpl_semi_sync_master_group1 = '2,3:1';
set global rpl_semi_sync_master_group2 = '1,4:1';
set global rpl_semi_sync_master_wait_no_slave = OFF;
set global rpl_semi_sync_master_enabled = ON;


--let $assert_status_name= Rpl_semi_sync_master_active_groups
--let $assert_status_value= 0
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_stat_master_flag
--let $assert_status_value= 0
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_err_flag
--let $assert_status_value= 1
--source include/assert_status.inc
--let $group1_status_expect= 0:GROUP_UNACTIVE
--let $group1_status= [show status like "Rpl_semi_sync_master_group1_status", Value, 1]
--let assert_cond= "$group1_status" like "$group1_status_expect"
--let assert_text= Rpl_semi_sync_master_group1_status should be 0:GROUP_UNACTIVE
--source include/assert.inc
--let $group2_status_expect= 0:GROUP_UNACTIVE
--let $group2_status= [show status like "Rpl_semi_sync_master_group2_status", Value, 1]
--let assert_cond= "$group2_status" like "$group2_status_expect"
--let assert_text= Rpl_semi_sync_master_group2_status should be 0:GROUP_UNACTIVE
--source include/assert.inc


--echo ###################################################################
--echo # test slave_case.sql
--echo ###################################################################
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

drop user if exists repl_test;
create user repl_test@'localhost' identified by 'repl_test';
create user repl_test@'%' identified by 'repl_test';

GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION CLIENT, 
CREATE ROUTINE, ALTER ROUTINE, CREATE TABLESPACE,ALTER,create temporary tables on *.* TO 'repl_test'@'localhost' ;

GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, LOCK TABLES, REPLICATION SLAVE, REPLICATION CLIENT, 
CREATE ROUTINE, ALTER ROUTINE, CREATE TABLESPACE,ALTER,create temporary tables on *.* TO 'repl_test'@'%' ;

drop database if exists it_quick_sync_read_only;

create database it_quick_sync_read_only;

create database `#mysql50#a-b-c`;


use it_quick_sync_read_only;

drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
drop table if exists t4;

create table t1(id int);
create index t1_index1 on t1(id);
create table t2(id int primary key, name varchar(10));
create table t3(id int);
create table t4(id int);

create table tb_test1(id int) engine = myisam;
create table tb_test2(id int) engine = myisam;


create view view1 as select t2.name from t1 join t2 where t1.id = t2.id;

create temporary table tmp1(id int, name varchar(20));

insert into t1 values(1),(2),(3);
insert into t2 values(1,'1'),(2,'2'),(3,'3');
insert into t3 values(4),(5),(6);
insert into t4 values(7),(8),(9);

insert into tmp1 values(10,'x'),(11,'y'),(12,'z');


--delimiter //
create procedure sp_test1(p_id int)
begin
  insert into t1 values(p_id);
end
//
--delimiter ;
call sp_test1(222);



--delimiter //
create function sf_test1(p_id int) returns int
DETERMINISTIC
begin
  return p_id * p_id;
end
//
--delimiter ;

select sf_test1(222);

set @sum = 0;
create trigger trig_test1 before insert on t1 for each row 
set @sum = @sum + new.id;
insert into t1 values(333); 
select @sum;


create event event_test1
on schedule at CURRENT_TIMESTAMP  +  interval 1  minute 
do
update t3 set id = id + 20;


##-- login with user
CHANGE MASTER TO  MASTER_HOST = 'localhost', MASTER_USER = 'repl_test', MASTER_PASSWORD = 'repl_test', MASTER_AUTO_POSITION = 1;

start slave;

stop slave;

##-- login with regular user
reset slave;

reset slave all;

--disable_result_log
show slave hosts;
--enable_result_log



--echo ########################################################################
--echo # Coverage Test
--echo ########################################################################
# Nothing is changed if the new value equals to the original value

# Ack array should be cleaned when disabling semisync master
SET GLOBAL rpl_semi_sync_master_enabled= OFF;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/uninstall_semisync_slave.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
set global rpl_semi_sync_master_wait_cond_lwm = '';
set global rpl_semi_sync_master_wait_cond_hwm = '';
set global rpl_semi_sync_master_group1 = '';
set global rpl_semi_sync_master_group2 = '';
set global rpl_semi_sync_master_wait_no_slave = ON;
SET GLOBAL rpl_semi_sync_master_enabled= OFF;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
while($clients != 0)
{
  sleep 10;
  --let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
}

# Ack array should be freed when uninstalling semisync master
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/uninstall_semisync_master.inc
# end

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
drop user repl_test@'localhost';
drop user repl_test@'%';
drop database it_quick_sync_read_only;
drop database `#mysql50#a-b-c`;

CALL mtr.add_suppression(".* Timeout waiting for reply of binlog .*");
CALL mtr.add_suppression(".* Failed to allocate memory for ack_array .*");
--source include/rpl_end.inc
