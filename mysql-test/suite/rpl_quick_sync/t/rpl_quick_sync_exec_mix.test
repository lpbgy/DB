################################################################################
# WL#7169 Semisync: make master wait for more than one slave to ack back
#
# The worklog added semisync master variable
# rpl_semi_sync_master_wait_for_slave_count. The variable controls how many acks
# from different slaves the transaction should wait for.
#
# The test verifies rpl_semi_sync_master_wait_for_slave_count works well.
################################################################################
--source include/not_group_replication_plugin.inc
--source include/have_binlog_format_row.inc

--let rpl_topology=1->2
--source include/rpl_init.inc
--source include/rpl_sync.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/install_semisync_master.inc

--echo ####################################################################
--echo # Test Case: check the thread_pool_size of threadpool mode
--echo ####################################################################
--let $assert_variable_name= thread_pool_size
--let $assert_variable_value= 4
--source include/assert_variable.inc

# It is for coverage test to cover the debug code.
SET GLOBAL rpl_semi_sync_master_enabled = 0;
set global rpl_semi_sync_master_timeout = 1000;

--echo ###################################################################
--echo # Test Case: add slave 2
--echo ###################################################################
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/install_semisync_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
while($clients != 1)
{
  sleep 10;
  --let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
}

--echo ###################################################################
--echo # the base config and status for quick sync
--echo ###################################################################
set global rpl_semi_sync_master_wait_cond_hwm = '2:1';
set global rpl_semi_sync_master_wait_cond_lwm = '1:0';
set global rpl_semi_sync_master_group1 = '2,3:1';
set global rpl_semi_sync_master_group2 = '1,4:1';
set global rpl_semi_sync_master_enabled = ON;

--let $assert_status_name= Rpl_semi_sync_master_active_groups
--let $assert_status_value= 2
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_stat_master_flag
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_err_flag
--let $assert_status_value= 0
--source include/assert_status.inc
--let $group1_status_expect= 1:GROUP_ACTIVE
--let $group1_status= [show status like "Rpl_semi_sync_master_group1_status", Value, 1]
--let assert_cond= "$group1_status" like "$group1_status_expect"
--let assert_text= Rpl_semi_sync_master_group1_status should be 1:GROUP_ACTIVE
--source include/assert.inc
--let $group2_status_expect= 0:GROUP_ACTIVE
--let $group2_status= [show status like "Rpl_semi_sync_master_group2_status", Value, 1]
--let assert_cond= "$group2_status" like "$group2_status_expect"
--let assert_text= Rpl_semi_sync_master_group2_status should be 0:GROUP_ACTIVE
--source include/assert.inc


--echo ###################################################################
--echo # test ddl
--echo ###################################################################
drop database if exists it_quick_sync1;
drop database if exists it_quick_sync2;
drop database if exists it_quick_sync3;

create database it_quick_sync1;
create database it_quick_sync2;
create database it_quick_sync3;


use it_quick_sync1;
drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
drop table if exists t4;

create table t1(id int);
create table t2(id int primary key, name varchar(10));
create table t3(id int);

##-- tee quick_sync.log
##-- -----------------------------------------------
##-- non Interactive trans
##-- -----------------------------------------------
select 'non Interactive trans';

insert into t1 values(3);

insert into t1 values(4);

drop table if exists t4;
create table t4(id int);

insert into t1 values(5);

insert into t1 values(6);

insert into t3 values(6);

drop table if exists t4;
create table t4(id int);


drop table if exists t4;
create table t4(id int);

drop table if exists t4;
create table t4(id int);


##-- -----------------------------------------------
##-- Interactive trans
##-- -----------------------------------------------
select 'Interactive trans';

begin ;
insert into t1 values(2);
insert into t1 values(3);
commit ;

begin ;
insert into t3 values(6);
insert into t3 values(7);
commit ;

##-- mixed
begin ;
insert into t1 values(2);
drop table if exists t4;
create table t4(id int);  
insert into t3 values(3);
commit ;

##-- error
begin ;
insert into t2 values(2,'abcd');
--error ER_DUP_ENTRY
insert into t2 values(2,'abcd');
commit ;



##-- -----------------------------------------------
##-- stmts block
##-- -----------------------------------------------
select 'stmts block';

##-- success
--delimiter //
begin;
insert into t1 values(6);
insert into t1 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t3 values(6);
insert into t3 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t3 values(6);
insert into t3 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t1 values(6);
insert into t1 values(7);
commit;
//
--delimiter ;


##-- success
--delimiter //
insert into t1 values(2);
insert into t1 values(3);
//
--delimiter ;


--delimiter //
insert into t3 values(2);
insert into t3 values(3);
//
--delimiter ;


--delimiter //
insert into t1 values(2);
drop table if exists t3;
create table t3(id int);
insert into t1 values(3);
//
--delimiter ;


--delimiter //
insert into t1 values(2);
drop table if exists t4;
create table t4(id int);
insert into t1 values(3);
drop table if exists t4;
create table t4(id int);
insert into t3 values(3);
//
--delimiter ;



--delimiter //
insert into t1 values(2);
drop table if exists t4;
create table t4(id int);
insert into t1 values(3);
drop table if exists t4;
create table t4(id int);
insert into t3 values(3);
drop table if exists t4;
create table t4(id int);
insert into t3 values(3);
//
--delimiter ;




##-- error
delete from t2;
insert into t2 values(2,'abcd');
--delimiter //
--error ER_DUP_ENTRY
insert into t2 values(2,'abcd');
insert into t2 values(2,'abcd');
//
--delimiter ;


##-- error
--delimiter //
--error ER_DUP_ENTRY
delete from t2;
insert into t2 values(2,'abcd');
insert into t2 values(2,'xyz');
//
--delimiter ;


delete from t2;
--delimiter //
--error ER_DUP_ENTRY
delete from t2;
insert into t2 values(2,'abcd');
insert into t2 values(2,'xyz');
//
--delimiter ;


--delimiter //
--error ER_DUP_ENTRY
delete from t2;
insert into t2 values(2,'abcd');
insert into t2 values(2,'xyz');
insert into t2 values(3,'cccc');
//
--delimiter ;



use it_quick_sync2;
drop table if exists t1_1;
drop table if exists t2_1;
drop table if exists t3_1;
drop table if exists t4_1;

create table t1_1(id int);
create table t2_1(id int primary key, name varchar(10));
create table t3_1(id int);

##-- tee quick_sync.log
##-- -----------------------------------------------
##-- non Interactive trans
##-- -----------------------------------------------
select 'non Interactive trans';

insert into t1_1 values(3);

insert into t1_1 values(4);

drop table if exists t4_1;
create table t4_1(id int);

insert into t1_1 values(5);

insert into t1_1 values(6);

insert into t3_1 values(6);

drop table if exists t4_1;
create table t4_1(id int);


drop table if exists t4_1;
create table t4_1(id int);

drop table if exists t4_1;
create table t4_1(id int);


##-- -----------------------------------------------
##-- Interactive trans
##-- -----------------------------------------------
select 'Interactive trans';

begin ;
insert into t1_1 values(2);
insert into t1_1 values(3);
commit ;

begin ;
insert into t3_1 values(6);
insert into t3_1 values(7);
commit ;

##-- mixed
begin ;
insert into t1_1 values(2);
drop table if exists t4_1;
create table t4_1(id int);  
insert into t3_1 values(3);
commit ;

##-- error
begin ;
insert into t2_1 values(2,'abcd');
--error ER_DUP_ENTRY
insert into t2_1 values(2,'abcd');
commit ;



##-- -----------------------------------------------
##-- stmts block
##-- -----------------------------------------------
select 'stmts block';

##-- success
--delimiter //
begin;
insert into t1_1 values(6);
insert into t1_1 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t3_1 values(6);
insert into t3_1 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t3_1 values(6);
insert into t3_1 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t1_1 values(6);
insert into t1_1 values(7);
commit;
//
--delimiter ;


##-- success
--delimiter //
insert into t1_1 values(2);
insert into t1_1 values(3);
//
--delimiter ;


--delimiter //
insert into t3_1 values(2);
insert into t3_1 values(3);
//
--delimiter ;


--delimiter //
insert into t1_1 values(2);
drop table if exists t3_1;
create table t3_1(id int);
insert into t1_1 values(3);
//
--delimiter ;


--delimiter //
insert into t1_1 values(2);
drop table if exists t4_1;
create table t4_1(id int);
insert into t1_1 values(3);
drop table if exists t4_1;
create table t4_1(id int);
insert into t3_1 values(3);
//
--delimiter ;



--delimiter //
insert into t1_1 values(2);
drop table if exists t4_1;
create table t4_1(id int);
insert into t1_1 values(3);
drop table if exists t4_1;
create table t4_1(id int);
insert into t3_1 values(3);
drop table if exists t4_1;
create table t4_1(id int);
insert into t3_1 values(3);
//
--delimiter ;



##-- error
delete from t2_1;
insert into t2_1 values(2,'abcd');
--delimiter //
--error ER_DUP_ENTRY
insert into t2_1 values(2,'abcd');
insert into t2_1 values(2,'abcd');
//
--delimiter ;


##-- error
--delimiter //
--error ER_DUP_ENTRY
delete from t2_1;
insert into t2_1 values(2,'abcd');
insert into t2_1 values(2,'xyz');
//
--delimiter ;


##-- error
delete from t2_1;
--delimiter //
--error ER_DUP_ENTRY
delete from t2_1;
insert into t2_1 values(2,'abcd');
insert into t2_1 values(2,'xyz');
//
--delimiter ;



##-- error
--delimiter //
--error ER_DUP_ENTRY
delete from t2_1;
insert into t2_1 values(2,'abcd');
insert into t2_1 values(2,'xyz');
insert into t2_1 values(3,'cccc');
//
--delimiter ;



use it_quick_sync3;
drop table if exists t1_2;
drop table if exists t2_2;
drop table if exists t3_2;
drop table if exists t4_2;

create table t1_2(id int);
create table t2_2(id int primary key, name varchar(10));
create table t3_2(id int);

##-- tee quick_sync.log
##-- -----------------------------------------------
##-- non Interactive trans
##-- -----------------------------------------------
select 'non Interactive trans';

insert into t1_2 values(3);

insert into t1_2 values(4);

drop table if exists t4_2;
create table t4_2(id int);

insert into t1_2 values(5);

insert into t1_2 values(6);

insert into t3_2 values(6);

drop table if exists t4_2;
create table t4_2(id int);


drop table if exists t4_2;
create table t4_2(id int);

drop table if exists t4_2;
create table t4_2(id int);


##-- -----------------------------------------------
##-- Interactive trans
##-- -----------------------------------------------
select 'Interactive trans';

begin ;
insert into t1_2 values(2);
insert into t1_2 values(3);
commit ;

begin ;
insert into t3_2 values(6);
insert into t3_2 values(7);
commit ;

##-- mixed
begin ;
insert into t1_2 values(2);
drop table if exists t4_2;
create table t4_2(id int);  
insert into t3_2 values(3);
commit ;

##-- error
begin ;
insert into t2_2 values(2,'abcd');
--error ER_DUP_ENTRY
insert into t2_2 values(2,'abcd');
commit ;



##-- -----------------------------------------------
##-- stmts block
##-- -----------------------------------------------
select 'stmts block';

##-- success
--delimiter //
begin;
insert into t1_2 values(6);
insert into t1_2 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t3_2 values(6);
insert into t3_2 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t3_2 values(6);
insert into t3_2 values(7);
commit;
//
--delimiter ;


--delimiter //
begin;
insert into t1_2 values(6);
insert into t1_2 values(7);
commit;
//
--delimiter ;


##-- success
--delimiter //
insert into t1_2 values(2);
insert into t1_2 values(3);
//
--delimiter ;


--delimiter //
insert into t3_2 values(2);
insert into t3_2 values(3);
//
--delimiter ;


--delimiter //
insert into t1_2 values(2);
drop table if exists t3_2;
create table t3_2(id int);
insert into t1_2 values(3);
//
--delimiter ;


--delimiter //
insert into t1_2 values(2);
drop table if exists t4_2;
create table t4_2(id int);
insert into t1_2 values(3);
drop table if exists t4_2;
create table t4_2(id int);
insert into t3_2 values(3);
//
--delimiter ;



--delimiter //
insert into t1_2 values(2);
drop table if exists t4_2;
create table t4_2(id int);
insert into t1_2 values(3);
drop table if exists t4_2;
create table t4_2(id int);
insert into t3_2 values(3);
drop table if exists t4_2;
create table t4_2(id int);
insert into t3_2 values(3);
//
--delimiter ;



##-- error
delete from t2_2;
insert into t2_2 values(2,'abcd');
--delimiter //
--error ER_DUP_ENTRY
insert into t2_2 values(2,'abcd');
insert into t2_2 values(2,'abcd');
//
--delimiter ;


##-- error
--delimiter //
--error ER_DUP_ENTRY
delete from t2_2;
insert into t2_2 values(2,'abcd');
insert into t2_2 values(2,'xyz');
//
--delimiter ;


##-- error
delete from t2_2;
--delimiter //
--error ER_DUP_ENTRY
delete from t2_2;
insert into t2_2 values(2,'abcd');
insert into t2_2 values(2,'xyz');
//
--delimiter ;



##-- error
--delimiter //
--error ER_DUP_ENTRY
delete from t2_2;
insert into t2_2 values(2,'abcd');
insert into t2_2 values(2,'xyz');
insert into t2_2 values(3,'cccc');
//
--delimiter ;




--echo ########################################################################
--echo # Coverage Test
--echo ########################################################################
# Nothing is changed if the new value equals to the original value

# Ack array should be cleaned when disabling semisync master
SET GLOBAL rpl_semi_sync_master_enabled= OFF;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/uninstall_semisync_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
while($clients != 0)
{
  sleep 10;
  --let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
}

# Ack array should be freed when uninstalling semisync master
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/uninstall_semisync_master.inc
# end

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
drop database if exists it_quick_sync1;
drop database if exists it_quick_sync2;
drop database if exists it_quick_sync3;
CALL mtr.add_suppression(".* Timeout waiting for reply of binlog .*");
CALL mtr.add_suppression(".* Failed to allocate memory for ack_array .*");
--source include/rpl_end.inc
