################################################################################
# WL#7169 Semisync: make master wait for more than one slave to ack back
#
# The worklog added semisync master variable
# rpl_semi_sync_master_wait_for_slave_count. The variable controls how many acks
# from different slaves the transaction should wait for.
#
# The test verifies rpl_semi_sync_master_wait_for_slave_count works well.
################################################################################
--source include/not_group_replication_plugin.inc
--source include/have_binlog_format_row.inc

--let rpl_topology=1->2
--source include/rpl_init.inc
--source include/rpl_sync.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/install_semisync_master.inc

--echo ####################################################################
--echo # Test Case: check the thread_pool_size of threadpool mode
--echo ####################################################################
--let $assert_variable_name= thread_pool_size
--let $assert_variable_value= 4
--source include/assert_variable.inc

# It is for coverage test to cover the debug code.
SET GLOBAL rpl_semi_sync_master_enabled = 0;
set global rpl_semi_sync_master_timeout = 1000;

--echo ###################################################################
--echo # Test Case: add slave 2
--echo ###################################################################
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/install_semisync_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
while($clients != 1)
{
  sleep 10;
  --let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
}

--echo ###################################################################
--echo # the base config and status for quick sync
--echo ###################################################################
set global rpl_semi_sync_master_wait_cond_hwm = '2:1';
set global rpl_semi_sync_master_wait_cond_lwm = '1:0';
set global rpl_semi_sync_master_group1 = '2,3:1';
set global rpl_semi_sync_master_group2 = '1,4:1';
set global rpl_semi_sync_master_enabled = ON;

--let $assert_status_name= Rpl_semi_sync_master_active_groups
--let $assert_status_value= 2
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_stat_master_flag
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_current_wait_groups
--let $assert_status_value= 1
--source include/assert_status.inc
--let $assert_status_name= Rpl_semi_sync_master_err_flag
--let $assert_status_value= 0
--source include/assert_status.inc
--let $group1_status_expect= 1:GROUP_ACTIVE
--let $group1_status= [show status like "Rpl_semi_sync_master_group1_status", Value, 1]
--let assert_cond= "$group1_status" like "$group1_status_expect"
--let assert_text= Rpl_semi_sync_master_group1_status should be 1:GROUP_ACTIVE
--source include/assert.inc
--let $group2_status_expect= 0:GROUP_ACTIVE
--let $group2_status= [show status like "Rpl_semi_sync_master_group2_status", Value, 1]
--let assert_cond= "$group2_status" like "$group2_status_expect"
--let assert_text= Rpl_semi_sync_master_group2_status should be 0:GROUP_ACTIVE
--source include/assert.inc


--echo ###################################################################
--echo # test ddl
--echo ###################################################################
drop database if exists it_quick_sync_proc;
create database it_quick_sync_proc;

use it_quick_sync_proc;


DROP TABLE IF EXISTS t5;
create table t5(id int primary key);

DROP PROCEDURE IF EXISTS sp_test;
--delimiter //
CREATE PROCEDURE sp_test(spvar int)
BEGIN
  insert into t5 values(spvar);
END
//
--delimiter ;
call sp_test(1);


DROP PROCEDURE IF EXISTS sp_test2;
--delimiter //
CREATE PROCEDURE sp_test2()
BEGIN
  select * from t5;
  insert into t5 values(2);
  drop table if exists t6;
  create table t6(id int);
  insert into t5 values(3);
END
//
--delimiter ;
call sp_test2();


DROP PROCEDURE IF EXISTS sp_test3;
--delimiter //
CREATE PROCEDURE sp_test3()
BEGIN
  insert into t5 values(4);
  drop table if exists t6;
  create table t6(id int);
  insert into t5 values(5);
  select * from t5;
  delete from t5;
END
//
--delimiter ;
call sp_test3();


DROP PROCEDURE IF EXISTS sp_test4;
--delimiter //
CREATE PROCEDURE sp_test4(spvar int)
BEGIN
  delete from t5;
  commit;
  insert into t5 values(spvar);
  commit;
END
//
--delimiter ;
call sp_test4(3);


--echo ########################################################################
--echo # Coverage Test
--echo ########################################################################
# Nothing is changed if the new value equals to the original value

# Ack array should be cleaned when disabling semisync master
SET GLOBAL rpl_semi_sync_master_enabled= OFF;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/uninstall_semisync_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
while($clients != 0)
{
  sleep 10;
  --let $clients= query_get_value(show status like "Rpl_semi_sync_master_clients", Value, 1)
}

# Ack array should be freed when uninstalling semisync master
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/uninstall_semisync_master.inc
# end

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
drop database if exists it_quick_sync_proc;
CALL mtr.add_suppression(".* Timeout waiting for reply of binlog .*");
CALL mtr.add_suppression(".* Failed to allocate memory for ack_array .*");
--source include/rpl_end.inc
