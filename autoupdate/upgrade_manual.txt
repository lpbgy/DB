【1、升级脚本】
升级过程需要该目录下的五个文件，缺一不可：
check_db.sh
check_slave_status.sh
modify_cnf.ini
upgrade_db.sh
rollback_db.sh
【注：每一次版本更新，需要更改upgrade_db.sh中的版本号，以及modify_cnf.ini中的配置文件更改信息】

【2、升级限制场景】
1）只支持升级备机；
2）只支持从2.0.04.02U1版本开始升级，老版本不支持；
3）只支持在Redhat7.4系统上升级，


【3、升级前准备工作】
1）需要由人工或者上层调用准备好升级包和升级脚本；
2）需要由人工或者上层调用备份完整的应用目录（除data目录外）

【4、升级过程分为3步】
1）升级前检查，示例如下：
./check_db.sh -v"V_2.0.04.02U1" -uroot -p111111 -h192.168.10.24 -P4403
说明：
-v表示DB的当前版本号；
-u表示DB的连接用户；
-p表示DB的连接密码；
-h表示DB的连接IP；
-P表示DB的连接端口；
2）升级过程，示例如下：
./upgrade_db.sh -v"V_2.0.04.02U1" -uroot -p111111 -h192.168.10.24 -P4403 -V"/home/mysql57_4403/ZXCLOUD-GOLDENDB-DBV2.0.04.03.zip"
说明：
-v表示DB的当前版本号；
-u表示DB的连接用户；
-p表示DB的连接密码；
-h表示DB的连接IP；
-P表示DB的连接端口；
-V表示DB的升级版本包路径；
3）升级后备机状态检查，示例如下：
./check_slave_status.sh -uroot -p111111 -h192.168.10.24 -P4403
说明：
-u表示DB的连接用户；
-p表示DB的连接密码；
-h表示DB的连接IP；
-P表示DB的连接端口；
4）升级失败回退，示例如下：
./rollback_db.sh -uroot -p111111
或者
./rollback_db.sh -uroot -p111111 -h192.168.10.24 -P4403


【5、升级失败恢复过程】
升级过程任何一个地方失败后，均需要回退升级过程。回退升级过程由人工或者上层调用完成。
在上层完成DB的升级版本回退后，还需要调用DB的升级回退脚本rollback_db.sh，回退部分配置项。
【回退功能说明】
1）由于目前从DBV2.0.03.02（5.7.17）版本升级到DBV5.0.02（5.7.22）版本，调用mysql_upgrade升级的功能在回退版本时不存在影响，因此rollback_db.sh回退脚本暂时不调用mysql_upgrade进行回退操作。
2）回退脚本中预留了调用mysql_upgrade的接口，只是暂时被注释，后续需要使用，经测试后可以放开。

【6、升级完成后清理动作】
升级后的脚本及版本包由人工或者上层调用清理。
